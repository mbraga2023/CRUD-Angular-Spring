{"ast":null,"code":"import { UntypedFormArray, UntypedFormControl, UntypedFormGroup } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nexport class FormUtilsService {\n  constructor() {}\n  validateAllFormFields(formGroup) {\n    Object.keys(formGroup.controls).forEach(field => {\n      const control = formGroup.get(field);\n      if (control instanceof UntypedFormControl) {\n        control.markAsTouched({\n          onlySelf: true\n        });\n      } else if (control instanceof UntypedFormGroup || control instanceof UntypedFormArray) {\n        control.markAsTouched({\n          onlySelf: true\n        });\n        this.validateAllFormFields(control);\n      }\n    });\n  }\n  getErrorMessage(formGroup, fieldName) {\n    const field = formGroup.get(fieldName);\n    return this.getErrorMessageField(field);\n  }\n  getErrorMessageField(field) {\n    if (field?.hasError('required')) {\n      return 'Campo obrigatório';\n    }\n    if (field?.hasError('minlength')) {\n      const requiredLength = field.errors ? field.errors['minlength']['requiredLength'] : 3;\n      return `Tamanho mínimo de ${requiredLength} caracteres.`;\n    }\n    if (field?.hasError('maxlength')) {\n      const requiredLength = field.errors ? field.errors['maxlength']['requiredLength'] : 100;\n      return `Tamanho máximo de ${requiredLength} caracteres.`;\n    }\n    return 'Campo inválido';\n  }\n  getFormArrayFieldsErrorMessage(formGroup, formArrayName, fieldName, index) {\n    const formArray = formGroup.get(formArrayName);\n    const field = formArray.controls[index].get(fieldName);\n    return this.getErrorMessageField(field);\n  }\n  isFormArrayRequired(formGroup, formArrayName) {\n    const formArray = formGroup.get(formArrayName);\n    return !formArray.valid && formArray.hasError('required') && formArray.touched;\n  }\n  static #_ = this.ɵfac = function FormUtilsService_Factory(t) {\n    return new (t || FormUtilsService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FormUtilsService,\n    factory: FormUtilsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["UntypedFormArray","UntypedFormControl","UntypedFormGroup","FormUtilsService","constructor","validateAllFormFields","formGroup","Object","keys","controls","forEach","field","control","get","markAsTouched","onlySelf","getErrorMessage","fieldName","getErrorMessageField","hasError","requiredLength","errors","getFormArrayFieldsErrorMessage","formArrayName","index","formArray","isFormArrayRequired","valid","touched","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Michel\\Documents\\GitHub\\CRUD-Angular-Spring\\crud-angular\\src\\app\\shared\\form\\form-utils.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { UntypedFormArray, UntypedFormControl, UntypedFormGroup } from '@angular/forms';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormUtilsService {\n\n  constructor() { }\n\nvalidateAllFormFields(formGroup: UntypedFormGroup | UntypedFormArray){\nObject.keys(formGroup.controls).forEach(field => {\n  const control = formGroup.get(field);\n\n  if (control instanceof UntypedFormControl){\n    control.markAsTouched({onlySelf: true});\n  } else if (control instanceof UntypedFormGroup || control instanceof UntypedFormArray){\n    control.markAsTouched({onlySelf: true});\n\n    this.validateAllFormFields (control);\n  }\n});\n}\n\n  getErrorMessage(formGroup: UntypedFormGroup, fieldName: string) {\n    const field = formGroup.get(fieldName) as UntypedFormControl;\n\n   return this.getErrorMessageField(field);\n  }\n\n  getErrorMessageField (field: UntypedFormControl) {\n\n    if (field?.hasError('required')) {\n      return 'Campo obrigatório';\n    }\n    if (field?.hasError('minlength')) {\n      const requiredLength = field.errors\n        ? field.errors['minlength']['requiredLength']\n        : 3;\n\n      return `Tamanho mínimo de ${requiredLength} caracteres.`;\n    }\n    if (field?.hasError('maxlength')) {\n      const requiredLength = field.errors\n        ? field.errors['maxlength']['requiredLength']\n        : 100;\n\n      return `Tamanho máximo de ${requiredLength} caracteres.`;\n    }\n\n    return 'Campo inválido';\n  }\n\n  getFormArrayFieldsErrorMessage(\n    formGroup: UntypedFormGroup,\n    formArrayName: string,\n    fieldName: string,\n    index: number\n    ){\n    const formArray = formGroup.get(formArrayName) as UntypedFormArray;\n    const field = formArray.controls[index].get(fieldName) as UntypedFormControl;\n    return this.getErrorMessageField(field);\n\n  }\n\n  isFormArrayRequired(formGroup: UntypedFormGroup, formArrayName: string) {\n    const formArray = formGroup.get(formArrayName) as UntypedFormArray;\n    return !formArray.valid && formArray.hasError('required') && formArray.touched;\n  }\n}\n"],"mappings":"AACA,SAASA,gBAAgB,EAAEC,kBAAkB,EAAEC,gBAAgB,QAAQ,gBAAgB;;AAKvF,OAAM,MAAOC,gBAAgB;EAE3BC,YAAA,GAAgB;EAElBC,qBAAqBA,CAACC,SAA8C;IACpEC,MAAM,CAACC,IAAI,CAACF,SAAS,CAACG,QAAQ,CAAC,CAACC,OAAO,CAACC,KAAK,IAAG;MAC9C,MAAMC,OAAO,GAAGN,SAAS,CAACO,GAAG,CAACF,KAAK,CAAC;MAEpC,IAAIC,OAAO,YAAYX,kBAAkB,EAAC;QACxCW,OAAO,CAACE,aAAa,CAAC;UAACC,QAAQ,EAAE;QAAI,CAAC,CAAC;OACxC,MAAM,IAAIH,OAAO,YAAYV,gBAAgB,IAAIU,OAAO,YAAYZ,gBAAgB,EAAC;QACpFY,OAAO,CAACE,aAAa,CAAC;UAACC,QAAQ,EAAE;QAAI,CAAC,CAAC;QAEvC,IAAI,CAACV,qBAAqB,CAAEO,OAAO,CAAC;;IAExC,CAAC,CAAC;EACF;EAEEI,eAAeA,CAACV,SAA2B,EAAEW,SAAiB;IAC5D,MAAMN,KAAK,GAAGL,SAAS,CAACO,GAAG,CAACI,SAAS,CAAuB;IAE7D,OAAO,IAAI,CAACC,oBAAoB,CAACP,KAAK,CAAC;EACxC;EAEAO,oBAAoBA,CAAEP,KAAyB;IAE7C,IAAIA,KAAK,EAAEQ,QAAQ,CAAC,UAAU,CAAC,EAAE;MAC/B,OAAO,mBAAmB;;IAE5B,IAAIR,KAAK,EAAEQ,QAAQ,CAAC,WAAW,CAAC,EAAE;MAChC,MAAMC,cAAc,GAAGT,KAAK,CAACU,MAAM,GAC/BV,KAAK,CAACU,MAAM,CAAC,WAAW,CAAC,CAAC,gBAAgB,CAAC,GAC3C,CAAC;MAEL,OAAO,qBAAqBD,cAAc,cAAc;;IAE1D,IAAIT,KAAK,EAAEQ,QAAQ,CAAC,WAAW,CAAC,EAAE;MAChC,MAAMC,cAAc,GAAGT,KAAK,CAACU,MAAM,GAC/BV,KAAK,CAACU,MAAM,CAAC,WAAW,CAAC,CAAC,gBAAgB,CAAC,GAC3C,GAAG;MAEP,OAAO,qBAAqBD,cAAc,cAAc;;IAG1D,OAAO,gBAAgB;EACzB;EAEAE,8BAA8BA,CAC5BhB,SAA2B,EAC3BiB,aAAqB,EACrBN,SAAiB,EACjBO,KAAa;IAEb,MAAMC,SAAS,GAAGnB,SAAS,CAACO,GAAG,CAACU,aAAa,CAAqB;IAClE,MAAMZ,KAAK,GAAGc,SAAS,CAAChB,QAAQ,CAACe,KAAK,CAAC,CAACX,GAAG,CAACI,SAAS,CAAuB;IAC5E,OAAO,IAAI,CAACC,oBAAoB,CAACP,KAAK,CAAC;EAEzC;EAEAe,mBAAmBA,CAACpB,SAA2B,EAAEiB,aAAqB;IACpE,MAAME,SAAS,GAAGnB,SAAS,CAACO,GAAG,CAACU,aAAa,CAAqB;IAClE,OAAO,CAACE,SAAS,CAACE,KAAK,IAAIF,SAAS,CAACN,QAAQ,CAAC,UAAU,CAAC,IAAIM,SAAS,CAACG,OAAO;EAChF;EAAC,QAAAC,CAAA,G;qBA9DU1B,gBAAgB;EAAA;EAAA,QAAA2B,EAAA,G;WAAhB3B,gBAAgB;IAAA4B,OAAA,EAAhB5B,gBAAgB,CAAA6B,IAAA;IAAAC,UAAA,EAFf;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}